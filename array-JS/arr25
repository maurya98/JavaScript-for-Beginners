/**
 * Performs a depth-first search traversal starting from a given node in a graph represented by an adjacency matrix.
 * 
 * @param {Array<Array<number>>} adjacencyMatrix - The adjacency matrix representing the graph
 * @param {number} numNodes - The number of nodes in the graph
 * @param {number} startNode - The starting node for the traversal
 * @returns {Array<number>} - The nodes visited in the order of traversal
 */
const depthFirstSearch = (adjacencyMatrix, numNodes, startNode) => {
  let stack = [];
  let visited = new Array(numNodes).fill(false);
  let traversalOrder = [];

  stack.push(startNode);
  visited[startNode] = true;

  while (stack.length > 0) {
    let currentNode = stack.pop();
    traversalOrder.push(currentNode);

    for (let neighbor = numNodes - 1; neighbor >= 0; neighbor--) {
      if (!visited[neighbor] && adjacencyMatrix[currentNode][neighbor] === 1) {
        visited[neighbor] = true;
        stack.push(neighbor);
      }
    }
  }

  return traversalOrder;
}